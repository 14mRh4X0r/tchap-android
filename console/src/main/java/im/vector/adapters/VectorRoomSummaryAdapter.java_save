/*
 * Copyright 2015 OpenMarket Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package im.vector.adapters;

import android.content.Context;
import android.graphics.Color;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import org.matrix.androidsdk.MXSession;
import org.matrix.androidsdk.data.Room;
import org.matrix.androidsdk.data.RoomSummary;
import org.matrix.androidsdk.data.RoomTag;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import im.vector.Matrix;
import im.vector.R;
import im.vector.util.VectorUtils;

/**
 * An adapter which can display room information.
 */
public class VectorRoomSummaryAdapter extends ConsoleRoomSummaryAdapter {
    private ArrayList<MXSession> mSessions = null;
    private final MXSession mMxSession;
    private Collection<RoomSummary> mRoomSummariesCompleteList;
    private ArrayList<ArrayList<RoomSummary>> mSummaryListBySections; // array of summaries
    private LayoutInflater mLayoutInflater;
    private int mChildLayoutResourceId; // mChildLayoutResourceId
    private int mHeaderLayoutResourceId;// mGroupHeaderLayoutResourceId;
    private int mHighlightColor;
    private final int[] mAvatarColorTab;
    private final int AVATAR_RGB_COLOUR1 = 0x76cfa6;
    private final int AVATAR_RGB_COLOUR2 = 0x50e2c2;
    private final int AVATAR_RGB_COLOUR3 = 0xf4c371;
    private final int SUMMARY_FAVOURITE_SECTION = 0; // "Favourites" index
    private final int SUMMARY_NO_TAG_SECTION    = 1; // "Rooms" index
    private final int SUMMARY_LOW_PRIO_SECTION  = 2; // "Low Priority" index


    private static class SummaryChildViewHolder {
        ImageView mAvatarImageView;
        TextView mRoomNameTxtView;
        TextView mRoomMsgTxtView;
        TextView mUnreadMsgTxtView;

        SummaryChildViewHolder(View aParentView){
            mAvatarImageView = (ImageView)aParentView.findViewById(R.id.avatar_img_vector);
            mRoomNameTxtView = (TextView) aParentView.findViewById(R.id.roomSummaryAdapter_roomName);
            mRoomMsgTxtView = (TextView) aParentView.findViewById(R.id.roomSummaryAdapter_roomMessage);
            mUnreadMsgTxtView = (TextView) aParentView.findViewById(R.id.bing_indicator_unread_message);
        }
    }

    /**
     * Build an array of RoomSummary objects organized according to the room tags (sections).
     * So far we have 3 sections for the following tags: ROOM_TAG_FAVOURITE, ROOM_TAG_LOW_PRIORITY
     * and ROOM_TAG_NO_TAG.
     * @param aRoomSummaryCollection the complete list of summaries
     * @return an array of summary lists splitted by sections
     */
    private ArrayList<ArrayList<RoomSummary>> initSummariesBySections(final Collection<RoomSummary> aRoomSummaryCollection) {
        ArrayList<ArrayList<RoomSummary>> summaryListBySectionsRetValue = new ArrayList<ArrayList<RoomSummary>>();

        if(null != aRoomSummaryCollection) {
            // allocations
            ArrayList<RoomSummary> favouriteRoomSummaryList = new ArrayList<RoomSummary>();
            ArrayList<RoomSummary> lowPriorityRoomSummaryList = new ArrayList<RoomSummary>();
            ArrayList<RoomSummary> noTagRoomSummaryList = new ArrayList<RoomSummary>();

            // add the sections: "favourite", "no tag" and "low prio"
            summaryListBySectionsRetValue.add(SUMMARY_FAVOURITE_SECTION, favouriteRoomSummaryList);
            summaryListBySectionsRetValue.add(SUMMARY_NO_TAG_SECTION, noTagRoomSummaryList);
            summaryListBySectionsRetValue.add(SUMMARY_LOW_PRIO_SECTION, lowPriorityRoomSummaryList);

            // retrieve the room IDs according to their tags
            List<String> favouriteRoomIdList = mMxSession.roomIdsWithTag(RoomTag.ROOM_TAG_FAVOURITE);
            List<String> lowPrioRoomIdList = mMxSession.roomIdsWithTag(RoomTag.ROOM_TAG_LOW_PRIORITY);
            List<String> noTagRoomIdList = mMxSession.roomIdsWithTag(RoomTag.ROOM_TAG_NO_TAG);

            // main search loop to go through all the summaries
            RoomSummary roomSummary;
            String roomSummaryId;
            boolean isFound;
            for (Iterator iterator = aRoomSummaryCollection.iterator(); iterator.hasNext(); ) {
                isFound = false;
                roomSummary = (RoomSummary) iterator.next();
                roomSummaryId = roomSummary.getRoomId();

                // favourite search to build the favourite list
                for (String roomId : favouriteRoomIdList) {
                    if (roomId.equals(roomSummaryId)) {
                        favouriteRoomSummaryList.add(roomSummary);
                        isFound = true;
                        break;
                    }
                }

                // low priority search to build the low priority list
                if (false == isFound) {
                    for (String roomId : lowPrioRoomIdList) {
                        if (roomId.equals(roomSummaryId)) {
                            lowPriorityRoomSummaryList.add(roomSummary);
                            isFound = true;
                            break;
                        }
                    }
                }

                // no tag search to build the no tag list
                if (false == isFound) {
                    for (String roomId : noTagRoomIdList) {
                        if (roomId.equals(roomSummaryId)) {
                            noTagRoomSummaryList.add(roomSummary);
                            break;
                        }
                    }
                }
            }
        }

        return summaryListBySectionsRetValue;
    }

    /**
     *
     * @param context activity context
     * @param sessions accounts list
     * @param childLayoutResourceId child resource ID for the BaseExpandableListAdapter
     * @param groupHeaderLayoutResourceId group resource ID for the BaseExpandableListAdapter
     */
    public VectorRoomSummaryAdapter(Context context, Collection<MXSession> sessions, int childLayoutResourceId, int groupHeaderLayoutResourceId)  {
        super(context, sessions, childLayoutResourceId, groupHeaderLayoutResourceId);

        // init iternal fields
        mSessions = new ArrayList<MXSession>(sessions);
        mLayoutInflater = LayoutInflater.from(mContext);
        mChildLayoutResourceId = childLayoutResourceId;
        mHeaderLayoutResourceId = groupHeaderLayoutResourceId;
        mHighlightColor = getHighlightMessageBackgroundColor();
        mAvatarColorTab = new int[] {AVATAR_RGB_COLOUR1, AVATAR_RGB_COLOUR2, AVATAR_RGB_COLOUR3};

        mMxSession = Matrix.getInstance(context).getDefaultSession();
        // public List<Room> roomsWithTag(final String tag) {

        if (null != mMxSession) {
            mRoomSummariesCompleteList = mMxSession.getDataHandler().getStore().getSummaries();
        }

        // init data model used to be be displayed in the view
        mSummaryListBySections = initSummariesBySections(mRoomSummariesCompleteList);
    }

    @Override
    public int getGroupCount() {
        return mSummaryListBySections.size();
    }

    @Override
    public Object getGroup(int groupPosition) {
        return null;
    }

    @Override
    public long getGroupId(int groupPosition) {
        return 0L;
    }

    @Override
    public int getChildrenCount(int groupPosition) {
        int countRetCode = mSummaryListBySections.get(groupPosition).size();
        /*
        if(this.isRecentsGroupIndex(groupPosition)) {
            ArrayList index1 = this.mSearchedPattern.length() > 0?this.mFilteredRecentsSummariesList:this.mRecentsSummariesList;
            return null != index1 && index1.size() > groupPosition?((ArrayList)index1.get(groupPosition)).size():0;
        } else {
            int index = groupPosition - this.mPublicsGroupStartIndex;
            return !this.displayPublicRooms()?0:(null == this.mPublicRoomsLists?1:(((List)this.mPublicRoomsLists.get(index)).size() == 0?0:(this.mSearchedPattern.length() > 0?((ArrayList)this.mFilteredPublicRoomsList.get(index)).size():((List)this.mPublicRoomsLists.get(index)).size())));
        }
        */
        return countRetCode;
    }

    @Override
    public Object getChild(int groupPosition, int childPosition) {
        return null;
    }

    @Override
    public long getChildId(int groupPosition, int childPosition) {
        return 0L;
    }

    @Override
    public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {
        if(convertView == null) {
            convertView = this.mLayoutInflater.inflate(this.mHeaderLayoutResourceId, (ViewGroup)null);
        }

        TextView heading = (TextView)convertView.findViewById(org.matrix.androidsdk.R.id.heading);
        ImageView imageView1 = (ImageView)convertView.findViewById(org.matrix.androidsdk.R.id.heading_image);

        String header1 = this.myRoomsTitle(groupPosition);
        heading.setText(header1);
        /*
        if(this.isRecentsGroupIndex(groupPosition)) {
            int imageView = 0;
            Collection summaries = ((HashMap)this.mSummaryMapsBySection.get(groupPosition)).values();

            RoomSummary summary;
            for(Iterator header = summaries.iterator(); header.hasNext(); imageView += summary.getUnreadEventsCount()) {
                summary = (RoomSummary)header.next();
            }

            String header1 = this.myRoomsTitle(groupPosition);
            if(imageView > 0) {
                header1 = header1 + " (" + imageView + ")";
            }

            heading.setText(header1);
        } else {
            heading.setText(this.publicRoomsTitle(groupPosition));
        }

        heading.setTextColor(this.mSectionTitleColor);

        if(isExpanded) {
            imageView1.setImageResource(org.matrix.androidsdk.R.drawable.expander_close_holo_light);
        } else {
            imageView1.setImageResource(org.matrix.androidsdk.R.drawable.expander_open_holo_light);
        }
        */
        return convertView;
    }
    /**
     * Compute the View that should be used to render the child,
     * given its position and its group’s position
     */
    @Override
    public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) {
        Iterator iterRoomSummary = mRoomSummariesCompleteList.iterator();
        RoomSummary roomFound;

        // search loop:
        while (childPosition > 0) {
            iterRoomSummary.next();
            childPosition--;
        }
        roomFound = (RoomSummary)iterRoomSummary.next();

        int unreadMsgCount = roomFound.getUnreadEventsCount();
        String roomName = roomFound.getRoomName();
        String roomTopic = roomFound.getRoomTopic();
        Room theRoom =  mMxSession.getDataHandler().getStore().getRoom(roomFound.getRoomId());

        if (convertView == null) {
            convertView = mLayoutInflater.inflate(mChildLayoutResourceId, parent, false);
        }

        // avatar
        ImageView avatarImageView = (ImageView)convertView.findViewById(R.id.avatar_img_vector);
        VectorUtils.setRoomVectorAvatar(avatarImageView, theRoom.getRoomId(), theRoom.getName(mMxSession.getMyUser().userId));

        // room name
        TextView roomNameTxtView = (TextView) convertView.findViewById(R.id.roomSummaryAdapter_roomName);
        roomNameTxtView.setText(roomName);

        // room message
        TextView roomMsgTxtView = (TextView) convertView.findViewById(R.id.roomSummaryAdapter_roomMessage);
        roomMsgTxtView.setText(roomTopic);

        // unread message indicator
        TextView unreadMsgTxtView = (TextView) convertView.findViewById(R.id.bing_indicator_unread_message);
        if (0 == unreadMsgCount) {
            unreadMsgTxtView.setBackgroundColor(Color.TRANSPARENT);
        }
        else{
            unreadMsgTxtView.setBackgroundColor(getUnreadMessageTextColor());
        }

        // timestamp
        TextView timestampTxtView = (TextView) convertView.findViewById(R.id.roomSummaryAdapter_ts);
        String timestampStr = getFormattedTimestamp(roomFound.getLatestEvent());
        timestampTxtView.setVisibility(View.VISIBLE);
        timestampTxtView.setText(timestampStr);
        //timestampTxtView.setTextColor(textColor);

/*
        // display a spinner while loading the public rooms
        // detect if the view contains the spinner widget: progressbar_waiting_room_members
        // TODO  why not use convertView.getId(); to check if adapter_item_waiting_room_members is displayed?
        View spinner = null;
        if (null != convertView) {
            spinner = convertView.findViewById(R.id.progressbar_waiting_room_members);
        }

        // assume that some public rooms are defined
        if (isPublicsGroupIndex(groupPosition) && (null == mPublicRoomsLists)) {
            if (null == spinner) {
                // display a spinner layout
                convertView = mLayoutInflater.inflate(R.layout.adapter_item_waiting_room_members, parent, false);
            }
            return convertView;
        }

        // must not reuse the view if it is not the right type
        if (null != spinner) {
            convertView = null;
        }

        if (convertView == null) {
            convertView = mLayoutInflater.inflate(mChildLayoutResourceId, parent, false);
        }

        try {
            // default UI
            // when a room is deleting, the UI is dimmed
            final View deleteProgress = (View) convertView.findViewById(R.id.roomSummaryAdapter_delete_progress);
            deleteProgress.setVisibility(View.GONE);
            convertView.setAlpha(1.0f);

            int textColor = getDefaultTextColor();

            if (isRecentsGroupIndex(groupPosition)) {
                List<RoomSummary> summariesList = (mSearchedPattern.length() > 0) ? mFilteredRecentsSummariesList.get(groupPosition) : mRecentsSummariesList.get(groupPosition);

                // should never happen but in some races conditions, it happened.
                if (0 == summariesList.size()) {
                    return convertView;
                }

                RoomSummary summary = (childPosition < summariesList.size()) ? summariesList.get(childPosition) : summariesList.get(summariesList.size() - 1);
                Integer unreadCount = summary.getUnreadEventsCount();

                CharSequence message = summary.getRoomTopic();
                String timestamp = null;

                // background color
                if (summary.isHighlighted()) {
                    convertView.setBackgroundColor(mHighlightColor);
                    textColor = getHighlightMessageTextColor();
                } else if ((unreadCount == null) || (unreadCount == 0)) {
                    convertView.setBackgroundColor(Color.TRANSPARENT);
                } else {
                    textColor = getUnreadMessageTextColor();
                    convertView.setBackgroundColor(textColor);
                }

                TextView textView = (TextView) convertView.findViewById(R.id.roomSummaryAdapter_roomName);

                RoomState latestRoomState = summary.getLatestRoomState();
                if (null == latestRoomState) {
                    Room room = roomFromRoomSummary(summary);

                    if ((null != room) && (null != room.getLiveState())) {
                        latestRoomState = room.getLiveState().deepCopy();
                        // store it to avoid retrieving it once
                        summary.setLatestRoomState(latestRoomState);
                    }
                }

                // the public rooms are displayed with bold fonts
                if ((null != latestRoomState) && (null != latestRoomState.visibility) && latestRoomState.visibility.equals(RoomState.VISIBILITY_PUBLIC)) {
                    textView.setTypeface(null, Typeface.BOLD);
                } else {
                    textView.setTypeface(null, Typeface.NORMAL);
                }

                textView.setTextColor(textColor);

                // display the unread messages count
                String roomNameMessage = ((latestRoomState != null) && !summary.isInvited()) ? latestRoomState.getDisplayName(summary.getMatrixId()) : summary.getRoomName();

                if (null != roomNameMessage) {
                    if ((null != unreadCount) && (unreadCount > 0) && !summary.isInvited()) {
                        roomNameMessage += " (" + unreadCount + ")";
                    }
                }

                textView.setText(roomNameMessage);

                if (summary.getLatestEvent() != null) {
                    EventDisplay display = new EventDisplay(mContext, summary.getLatestEvent(), latestRoomState);
                    display.setPrependMessagesWithAuthor(true);
                    message = display.getTextualDisplay();
                    timestamp = getFormattedTimestamp(summary.getLatestEvent());
                }

                // check if this is an invite
                if (summary.isInvited() && (null != summary.getInviterUserId())) {
                    String inviterName = summary.getInviterUserId();
                    String myName = summary.getMatrixId();

                    if (null != latestRoomState) {
                        inviterName = latestRoomState.getMemberName(inviterName);
                        myName = latestRoomState.getMemberName(myName);
                    } else {
                        inviterName = memberDisplayName(summary.getMatrixId(), inviterName);
                        myName = memberDisplayName(summary.getMatrixId(), myName);
                    }

                    message = mContext.getString(R.string.notice_room_invite, inviterName, myName);
                }

                textView = (TextView) convertView.findViewById(R.id.roomSummaryAdapter_message);
                textView.setText(message);
                textView.setTextColor(textColor);
                textView = (TextView) convertView.findViewById(R.id.roomSummaryAdapter_ts);
                textView.setVisibility(View.VISIBLE);
                textView.setText(timestamp);
                textView.setTextColor(textColor);

                Room room = roomFromRoomSummary(summary);

                if ((null != room) && room.isLeaving()) {
                    convertView.setAlpha(0.3f);
                    deleteProgress.setVisibility(View.VISIBLE);
                }
            } else {
                int index = groupPosition - mPublicsGroupStartIndex;
                List<PublicRoom> publicRoomsList = null;

                if (mSearchedPattern.length() > 0) {
                    // add sanity checks
                    // GA issue : could crash while rotating the screen
                    if ((null != mFilteredPublicRoomsList) && (index < mFilteredPublicRoomsList.size())) {
                        publicRoomsList = mFilteredPublicRoomsList.get(index);
                    }
                } else {
                    // add sanity checks
                    // GA issue : could crash while rotating the screen
                    if ((null != mPublicRoomsLists) && (index < mPublicRoomsLists.size())) {
                        publicRoomsList = mPublicRoomsLists.get(index);
                    }
                }

                // sanity checks failed.
                if (null == publicRoomsList) {
                    TextView textView = (TextView) convertView.findViewById(R.id.roomSummaryAdapter_roomName);
                    textView.setTypeface(null, Typeface.BOLD);
                    textView.setTextColor(textColor);
                    textView.setText("");

                    textView = (TextView) convertView.findViewById(R.id.roomSummaryAdapter_message);
                    textView.setTextColor(textColor);
                    textView.setText("");

                    textView = (TextView) convertView.findViewById(R.id.roomSummaryAdapter_ts);
                    textView.setTextColor(textColor);
                    textView.setVisibility(View.VISIBLE);
                    textView.setText("");

                    convertView.setBackgroundColor(0);
                } else {
                    PublicRoom publicRoom = publicRoomsList.get(childPosition);

                    String matrixId = null;

                    if ((mRecentsSummariesList.size() > 0) && (mRecentsSummariesList.get(0).size() > 0)) {
                        matrixId = mRecentsSummariesList.get(0).get(0).getMatrixId();
                    }

                    String displayName = publicRoom.getDisplayName(matrixId);

                    TextView textView = (TextView) convertView.findViewById(R.id.roomSummaryAdapter_roomName);
                    textView.setTypeface(null, Typeface.BOLD);
                    textView.setTextColor(textColor);
                    textView.setText(displayName);

                    textView = (TextView) convertView.findViewById(R.id.roomSummaryAdapter_message);
                    textView.setText(publicRoom.topic);
                    textView.setTextColor(textColor);

                    textView = (TextView) convertView.findViewById(R.id.roomSummaryAdapter_ts);
                    textView.setVisibility(View.VISIBLE);
                    textView.setTextColor(textColor);

                    if (publicRoom.numJoinedMembers > 1) {
                        textView.setText(publicRoom.numJoinedMembers + " " + mContext.getString(R.string.users));
                    } else {
                        textView.setText(publicRoom.numJoinedMembers + " " + mContext.getString(R.string.user));
                    }

                    String alias = publicRoom.getAlias();

                    if ((null != alias) && (mHighLightedRooms.indexOf(alias) >= 0)) {
                        convertView.setBackgroundColor(mPublicHighlightColor);
                    } else {
                        convertView.setBackgroundColor(0);
                    }
                }
            }
        } catch (Exception e) {
            // prefer having a weird UI instead of a crash
        }
*/
        return convertView;
    }


    @Override
    public boolean hasStableIds() {
        return false;
    }

    @Override
    public boolean isChildSelectable(int groupPosition, int childPosition) {
        return true;
    }

    @Override
    public RoomSummary getRoomSummaryAt(int groupPosition, int childPosition) {
        //return this.mSearchedPattern.length() > 0?(RoomSummary)((ArrayList)this.mFilteredRecentsSummariesList.get(section)).get(index):(RoomSummary)((ArrayList)this.mRecentsSummariesList.get(section)).get(index);
        Iterator iterRoomSummary = mRoomSummariesCompleteList.iterator();
        RoomSummary roomSummaryFound;

        // search loop:
        while (childPosition > 0) {
            iterRoomSummary.next();
            childPosition--;
        }
        roomSummaryFound = (RoomSummary)iterRoomSummary.next();
        return roomSummaryFound;
    }

    /**
     * Compute the background colour of the avatar associated to a room.
     * @param aRoomName the room name as a string
     * @return colour value of avatar background
     */
    public int getAvatarBackgroundColor(String aRoomName){
        int colorIndexRetCode = 0;
        int indexSum = 0;

        if(null != aRoomName) {
            for (int i=0; i < aRoomName.length(); i++) {
                indexSum += aRoomName.indexOf(i);
            }
        }

        // compute the return value based on the room name modulus its size
        colorIndexRetCode = indexSum%aRoomName.length();
        return colorIndexRetCode;
    }
}
